<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 开启注解-->
    <context:annotation-config/>
    <!--<import resource="memcache-config.xml"/>-->

    <!--配置数据库相关参数的属性-->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    <!--数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--<property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>-->
        <!--<property name="minPoolSize" value="${c3p0.minPoolSize}"/>-->
        <!--<property name="autoCommitOnClose" value="${c3p0.autoCommitOnClose}"/>-->
        <!--<property name="checkoutTimeout" value="${c3p0.checkoutTimeout}"/>-->
        <!--<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"/>-->
    </bean>



    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"><!--配置SqlSessionFactory对象-->

        <property name="dataSource" ref="dataSource"/><!--注入数据库连接池-->

        <property name="typeAliasesPackage" value="com.lyh.entity"/><!--扫描model包 使用别名-->

        <!--&lt;!&ndash;指定MyBatis配置文件&ndash;&gt;-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--指定mapper映射文件的位置-->
        <property value="classpath*:mapper/*.xml" name="mapperLocations"/>

    </bean>
    <!--扫描接口文件-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lyh.dao "/>
    </bean>

    <!--扫描service包下所有使用注解的类型-->
    <context:component-scan base-package="com.lyh.service"/>


    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"><!--配置事务管理-->

        <property name="dataSource" ref="dataSource"/><!--注入数据库连接池-->
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- aop 作用于controller-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--启动扫描机制，扫描对应包-->
    <context:annotation-config/>
    <!--<context:component-scan base-package="com.lyh.service" />-->
    <!--基于注解实现aop-->
    <context:component-scan base-package="com.lyh.utils"/>

    <!--&lt;!&ndash;开启aop&ndash;&gt;-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!-- 客户端：java_memcached-release_2.6.3 -->
    <bean id="memcachedPool" class="com.whalin.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize" lazy-init="false" destroy-method="shutDown">
        <constructor-arg>
            <value>memcachedPool</value>
        </constructor-arg>
        <!-- 可以设置多个memcached服务器 -->
        <property name="servers">
            <list>
                <value>127.0.0.1:11211</value>
            </list>
        </property>
        <!-- 每个服务器初始连接数 -->
        <property name="initConn">
            <value>10</value>
        </property>
        <!-- 每个服务器最小连接数 -->
        <property name="minConn">
            <value>20</value>
        </property>
        <!-- 每个服务器最大连接数 -->
        <property name="maxConn">
            <value>1000</value>
        </property>
        <!-- 主线程睡眠时间 -->
        <property name="maintSleep">
            <value>30000</value>
        </property>
        <!-- TCP/Socket的参数，如果是true在写数据时不缓冲，立即发送出去参数 -->
        <property name="nagle">
            <value>false</value>
        </property>
        <!-- 连接超时/阻塞读取数据的超时间是 -->
        <property name="socketTO">
            <value>3000</value>
        </property>
    </bean>

    <bean id="memcachedClient" class="com.whalin.MemCached.MemCachedClient" >
        <constructor-arg>
            <value>memcachedPool</value>
        </constructor-arg>
    </bean>

    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"  />
    <!-- redis连接池配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxIdle}" />
        <!--连接池的最大数据库连接数  -->
        <property name="maxTotal" value="${redis.maxTotal}" />
        <!--最大建立连接等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
        <!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
        <property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
        <!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
        <property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
        <!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
        <property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
        <!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <!--在空闲时检查有效性, 默认false  -->
        <property name="testWhileIdle" value="${redis.testWhileIdle}" />
    </bean >

    <!--Spring Mvc+Redis 实现session共享-->
    <bean id="redisHttpSessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="600"/>
    </bean>

    <!--redis连接工厂 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <!--IP地址 -->
        <property name="hostName" value="${redis.hostName}"></property>
        <!--端口号  -->
        <property name="port" value="${redis.port}"></property>
        <!--如果Redis设置有密码  -->
        <property name="password" value="${redis.password}" />
        <!--客户端超时时间单位是毫秒  -->
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>

    <!--redis操作模版,使用该对象可以操作redis  -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
        <property name="keySerializer" >
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer" >
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
        <!--开启事务  -->
        <property name="enableTransactionSupport" value="true"></property>
    </bean >

    <!--自定义redis工具类,在需要缓存的地方注入此类  -->
    <bean id="redisUtil" class="com.lyh.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>



    <!--SMS工具类-->
    <bean id="SMS" class="com.lyh.utils.SMS">
        <constructor-arg name="serverIP" value="app.cloopen.com"/>
        <constructor-arg name="serverPort" value="8883"/>
        <constructor-arg name="accountSid" value="8aaf07086874781101687ec3f4c703e6"/>
        <constructor-arg name="accountToken" value="0641417386474f34a5d5793cf9e6ee19"/>
        <constructor-arg name="appId" value="8aaf07086874781101687ec3f52203ed"/>
    </bean>

    <!--sendEmail工具类-->
    <bean id="SendEmail" class="com.lyh.utils.SendEmail">
        <constructor-arg name="url" value="http://api.sendcloud.net/apiv2/mail/send"/>
        <constructor-arg name="apiUser" value="liyuhang_test_YcbLEd"/>
        <constructor-arg name="apiKey" value="3byz7GxV2p"/>
        <constructor-arg name="subject" value="测试"/>
    </bean>

    <!--腾讯云图片上传-->
    <bean id="COSBean" class="com.lyh.entity.COSBean">
        <property name="secretId" value="AKID02uhMrQefQAMVQ6ZnocEclhOmBNQ"/>
        <property name="secretKey" value="zlHctxluJYZLuEJArKYllfKk28"/>
        <property name="bucketName" value="liyuhang-1257785836"/>
        <property name="regionName" value="ap-beijing"/>
    </bean>

    <!--阿里云图片工具类-->
    <bean id="OSSUtil" class="com.lyh.utils.OSSUtil">
        <constructor-arg name="endpoint" value="oss-cn-beijing.aliyuncs.com"/>
        <constructor-arg name="accessKeyId" value="LTAIjg5Ux"/>
        <constructor-arg name="accessKeySecret" value="50ETugQJIih5asRqxkSiLG8U"/>
        <constructor-arg name="bucketName" value="liyuhng-1"/>
    </bean>
</beans>
